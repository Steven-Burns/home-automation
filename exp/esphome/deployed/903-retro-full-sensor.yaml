esp32:
  board: nodemcu-32s

packages:
  blinky: !include
    file: ../include/interval-blinky.yaml
    vars:
      builtin_led_pin: "GPIO2"
  illuminance: !include
    file: ../include/photoresistor-illuminance.yaml
    vars:
      illuminance_pin: "GPIO39"
  radar_motion: !include
    file: ../include/HLK-LD2410-radar-motion.yaml
    vars:
      # GPIO1 and 3 are labeled as UART0, but that conflicts with logging
      # 9 andd 10 are labeled as UART1, but that results in a warning that 
      # those pins might be hooked to flash.  So let's try 17 and 16
      uart_2_tx_pin: "GPIO17"
      uart_2_rx_pin: "GPIO16"
  i2c: !include
    file: ../include/i2c.yaml
    vars:
      # the pinouts for this board say nothing about I2C,
      # but other boards with the same MCU chip use 21 and 22
      i2c_sda_pin: "GPIO21"
      i2c_scl_pin: "GPIO22"
      i2c_freq: "420kHz"
  temp_humidity: !include
    file: ../include/BMP280-AHT20-temp-humidity.yaml
    vars: 
      temperature_offset: "-5.50"    
  display: !include
    file: ../include/SDD1306-OLED-display-fast-boards.yaml
  wifi: !include
    file: ../include/wifi.yaml
  relay: !include
    file: ../include/single-flarp-relay.yaml









select:
  - platform: template
    id: lighting_selector_id
    name: "Lighting Scene Selector"
    optimistic: true
    options:
      - "ActivateToggle"
      - "ActivateScene01"
      - "ActivateScene02"
      - "ActivateScene03"
      - "ActivateScene04"
      - "ActivateScene05"
      - "ActivateScene06"
      - "ActivateScene07"
      - "ActivateScene08"
      - "ActivateScene09"
      - "ActivateLastScene"
    initial_option: "ActivateScene01"
    # set_action:
    #   - logger.log:
    #       format: "Chosen option: %s"
    #       args: ["x.c_str()"]    

    # If you don’t set a lambda and optimistic is false (default), updates to the select component state will need to be taken care of as part of your set_action using id(my_select).publish_state(x); (in a lambda). Do not use select.set Action here, as this would generate a loop. Also, don’t use id(my_select).state = x as this won’t have the desired effect (e.g. HA won’t update with the change).
    # publish_state?  I wonder if that can be used to force a state update even when the value is unchanged.

binary_sensor:
  - platform: gpio
    name: "Lighting Button"
    id: button_0_id
    pin:
      number: GPIO15
      mode:
        input: true
        pulldown: true
    on_multi_click:
    - timing:
        - ON for at most 0.75s
        - OFF for at most 0.3s
        - ON for at most 0.75s
        - OFF for at least 0.1s
      then:
        - logger.log: "Double Clicked"
        - select.next:
            id: lighting_selector_id
            cycle: true
    - timing:
        - ON for 0.75s to 3s
        - OFF for at least 0.1s
      then:
        - logger.log: "Single Long Clicked"
        - select.last: lighting_selector_id
    - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - logger.log: "Single Short Clicked"
        - switch.toggle: relay_0_id
        - select.first: lighting_selector_id
      invalid_cooldown: 0.5s







# "All Device" baseline stuff here

<<: !include 
  file: ../include/esp32-device-baseline.yaml
  vars:
    device_hostname: "m-dng-01da50_903"
    device_comment: "Retrofit sensor unit on board 903."
