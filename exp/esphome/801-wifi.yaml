esp8266:
  board: nodemcuv2

packages:
  blinky: !include
    file: include/interval-blinky.yaml
    vars:
      builtin_led_pin: "GPIO2"
  wifi: !include
    file: include/wifi.yaml
  i2c: !include
    file: include/i2c.yaml
    vars:
      i2c_sda_pin: "GPIO12"
      i2c_scl_pin: "GPIO14"

font:
  - file: "fonts/spleen-5x8.bdf"
    id: tiny_font_id

external_components:
  - source:
      type: local
      path: components
    components: [ game_of_life_animation ]


# idea: starting file is the initial world; this will allow start places from LifeWiki to be loaded
# type is always BINARY
# instead of next_frame, prev_frame, just next_generation()
# set_frame reloads the initial image?
# or maybe allow the initial image to be a multi-frame gif as in the case of animation component, where 
# each frame can be selected as a start frame.


game_of_life_animation:
  - file: "images/GameOfLife/border-128x48.gif"
    id: animation_id
    type: BINARY

animation:
  - file: "images/falling-head.gif"
    id: animation_1_id
    type: BINARY

interval:
  - interval: 0.5s
    then:
      lambda: |-
        static auto ani = id(animation_id);
        ani->next_generation();

switch:
  - platform: template
    name: "Next Generation"
    id: nextgen_switch_id
    turn_on_action:
      lambda: |-
        id(animation_id)->next_generation();
        id(nextgen_switch_id)->turn_off();
  - platform: template  
    name: "Reset to frame 0"
    id: reset_switch_id
    turn_on_action:
      lambda: |-
        id(animation_id)->set_frame(0);
        id(reset_switch_id)->turn_off();


display:
  - platform: ssd1306_i2c
    id: ssd1306_id
    model: "SSD1306_128x64"
    update_interval: 1s
    contrast: 60%
    invert: false
    rotation: 0
    lambda: |-
      static const int CHAR_HEIGHT_PX = 8;
      static auto width = it.get_width();
      static auto height = it.get_height();
      static auto font = id(tiny_font_id);

      auto ip_addr = id(ip_address_id)->get_state();
      if (ip_addr.length())
      {
        int line = 0;
        it.printf(width, ++line * CHAR_HEIGHT_PX, font, TextAlign::BASELINE_RIGHT, "%s", App.get_name().c_str());
        it.printf(width, ++line * CHAR_HEIGHT_PX, font, TextAlign::BASELINE_RIGHT, "%s", ip_addr.c_str());  
      } 

      // updating full-screen images is pixel-by-pixel == slow, and results in esphome runtime warnings about the 
      // display taking too long to update on esp8266 hardware.
      static auto ani = id(animation_id);
      it.image(0, 16, ani, COLOR_ON, COLOR_OFF);
      


# "All Device" baseline stuff here

<<: !include 
  file: include/esp8266-device-baseline.yaml
  vars:
    device_hostname: "801-esphome"
    device_comment: "esp8266 with built-in display."



