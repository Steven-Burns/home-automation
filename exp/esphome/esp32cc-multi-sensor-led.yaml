esphome:
  name: esp32c3-test
  friendly_name: Steve's ESP32C3 test gadget
  comment: |- 
    test board to play around with ESPHome. This template demonstrates working OLED display, 
    PIR sensor, photodiode, keyboard with click timings, LED strip light control.
  area: Gym
  name_add_mac_suffix: true
  project:
    name: "arkadiahouse.home_automation"
    version: "0.1.0"

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  - platform: esphome
    password: ""

wifi:
  id: wifi_id
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32C3-test Fallback Hotspot"
    password: "PJnNb7VRCS3I"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      # I don't see the use of these properties: unclear to me how the gadget would become
      # multi-homed on WiFi.
      # address_0:
      #   name: ESP IP Address 0
      # address_1:
      #   name: ESP IP Address 1
      # address_2:
      #   name: ESP IP Address 2
      # address_3:
      #   name: ESP IP Address 3
      # address_4:
      #   name: ESP IP Address 4
    ssid:
      name: Connected SSID
    bssid:
      name: Connected BSSID
    mac_address:
      name: Wifi MAC Address
    scan_results:
      name: ESP Latest Scan Results
    dns_address:
      name: DNS Addresses

captive_portal:

web_server:

# this component sync the local gadget to the time of the Home Asst server
time:
  - platform: homeassistant
    id: esptime

i2c:
  sda: GPIO6
  scl: GPIO7
  # goose up the frequency so that we don't get runtime warnings about the display component
  # taking too long to update.
  frequency: 300kHz

font:
  - file: "fonts/spleen-5x8.bdf"
    id: spleen_font

qr_code:
  - id: homepage_qr
    value: https://arkadiahouse.us
    ecc: MEDIUM

display:
  - platform: ssd1306_i2c
    model: "SSD1306_128x64"
    update_interval: 1s
    contrast: 20%
    invert: false
    lambda: |-
      auto width = it.get_width();
      auto height = it.get_height();

      // en lieu of a hardware blinky light, toggle a software light every 
      // time the display is updated (1s interval)
      static bool blinky_is_lit = false;
      blinky_is_lit = !blinky_is_lit;
      it.filled_circle(3, height - 4, 3, blinky_is_lit ? COLOR_ON : COLOR_OFF);

      auto font_id = id(spleen_font);
      auto wifi_component = id(wifi_id);
      int char_height = 9;
      int left_margin = 0;
      int line = 0;
      it.printf(left_margin, line++ * char_height, font_id, "H:%s", App.get_name().c_str());
      for (auto &ip : wifi_component->get_ip_addresses()) 
      {
        if (ip.is_set()) {
          it.printf(left_margin, line * char_height, font_id, "I:%s", ip.str().c_str());
          ++line;
        }
      }
      // it.printf(left_margin, line++ * char_height, font_id, "Conn:%s", wifi_component->is_connected() ? "Y" : "N");

      /*
      for (int i = 1; i < (height / char_height); ++i) 
      {
        it.printf(left_margin, i * char_height, font_id, "line %d", i);
      }
      */

      it.qr_code(width - 35, 16, id(homepage_qr), Color(255,255,255), 1);

switch:
  - platform: gpio
    id: "laser_beam_01"
    name: "LaserBeam"
    pin: GPIO5

binary_sensor:
  - platform: gpio
    name: "photodiode"
    pin: GPIO3
    filters:
      - delayed_on_off: 1s    
      - settle: 1s
  - platform: gpio
    name: "PIR Motion"
    pin: GPIO21
    device_class: motion
    filters:
      - delayed_on_off: 0s
  - platform: gpio
    name: "Button0"
    pin:
      number: 2
      mode:
        input: true
        pulldown: true
    # filters:
    #   - settle: 0.2s
    on_multi_click:
    - timing:
        - ON for at most 0.75s
        - OFF for at most 0.3s
        - ON for at most 0.75s
        - OFF for at least 0.1s
      then:
        - logger.log: "Double Clicked"
    - timing:
        - ON for 0.75s to 3s
        - OFF for at least 0.1s
      then:
        - logger.log: "Single Long Clicked"
    - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - logger.log: "Single Short Clicked"
        - switch.turn_on: laser_beam_01
      invalid_cooldown: 0.5s
  - platform: gpio
    name: "Button1"
    pin:
      number: 10
      mode:
        input: true
        pulldown: true
    # filters:
    #   - settle: 0.2s
    on_multi_click:
    - timing:
        - ON for at most 0.75s
        - OFF for at most 0.3s
        - ON for at most 0.75s
        - OFF for at least 0.1s
      then:
        - logger.log: "Double Clicked"
    - timing:
        - ON for 0.75s to 3s
        - OFF for at least 0.1s
      then:
        - logger.log: "Single Long Clicked"
    - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - logger.log: "Single Short Clicked"
        - switch.turn_off: laser_beam_01
      invalid_cooldown: 0.5s
  - platform: gpio
    name: "Button2"
    pin:
      number: 8
      mode:
        input: true
        pulldown: true
    # filters:
    #   - settle: 0.2s
    on_multi_click:
    - timing:
        - ON for at most 0.75s
        - OFF for at most 0.3s
        - ON for at most 0.75s
        - OFF for at least 0.1s
      then:
        - logger.log: "Double Clicked"
    - timing:
        - ON for 0.75s to 3s
        - OFF for at least 0.1s
      then:
        - logger.log: "Single Long Clicked"
    - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - logger.log: "Single Short Clicked"
      invalid_cooldown: 0.5s

light:
  - platform: esp32_rmt_led_strip
    id: led_strip
    rgb_order: GRB
    pin: GPIO9
    num_leds: 10
    rmt_channel: 0
    chipset: ws2812
    name: "My Light"
    default_transition_length: 0.5s
    effects:
      # Use default parameters:
      - random:
      # Customize parameters
      - random:
          name: "My Slow Random Effect"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "My Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s
      - strobe:
      - strobe:
          name: Strobe Effect With Custom Values
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
      - flicker:
      - flicker:
          name: Flicker Effect With Custom Values
          alpha: 95%
          intensity: 1.5%
      - lambda:
          name: My Custom Effect
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(led_strip).turn_on();
            // Transition of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;
      - addressable_rainbow:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 5
      - addressable_color_wipe:
      - addressable_color_wipe:
          name: Color Wipe Effect With Custom Values
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 5
              gradient: true
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: true
      - addressable_scan:
      - addressable_scan:
          name: Scan Effect With Custom Values
          move_interval: 100ms
          scan_width: 2
      - addressable_twinkle:
      - addressable_twinkle:
          name: Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 4ms
      - addressable_random_twinkle:
      - addressable_random_twinkle:
          name: Random Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 32ms
      - addressable_fireworks:
      - addressable_fireworks:
          name: Fireworks Effect With Custom Values
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: false
          fade_out_rate: 120
      - addressable_flicker:
      - addressable_flicker:
          name: addressable Flicker Effect With Custom Values
          update_interval: 16ms
          intensity: 5%
      - addressable_lambda:
          name: "lambda"
          update_interval: 16ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = Color(r, g, b);
            // Get the color at index num (Color instance)
            // it[num].get();

            // Example: Simple color wipe
            for (int i = it.size() - 1; i > 0; i--) {
              it[i] = it[i - 1].get();
            }
            it[0] = Color::random_color();

            // Bonus: use .range() and .all() to set many LEDs without having to write a loop.
            // it.range(0, 50) = Color::BLACK;
            it.all().fade_to_black(10);          

sensor:
  - platform: dht
    pin: GPIO4
    model: DHT11
    temperature:
      name: "Temperature"
      accuracy_decimals: 1
      device_class: temperature
      filters:
        - delta: 0.1
        - heartbeat: 30s
    humidity:
      name: "Humidity"
      accuracy_decimals: 1
      device_class: humidity
      filters:
        - delta: 0.1
        - heartbeat: 30s        
    update_interval: 61s
  



